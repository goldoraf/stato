====== FAQ ======

===== Pourquoi n'y a t-il pas telle ou telle fonctionnalité dans Stato ? =====
Stato se veut être un framework léger et n'offrant que le strict nécessaire : à mes yeux, les fonctionnalités indispensables pour le développement d'une application web sont le support de l'architecture MVC, une bonne couche ORM, des fonctionnalités d'i18n et d'envoi de mails. Ces fonctionnalités couvrent en règle générale 80% des besoins des développeurs, et je préfère passer mon temps à améliorer du code utilisé dans tous les projets qu'à essayer de couvrir une partie des 20% restants, d'autant plus que répondre à certains de ces besoins spécifiques serait extrêmement consommateur de temps, et qu'il existe déjà des librairies pour répondre à ces besoins. Prenons par exemple l'export PDF : écrire une librairie de génération de PDF me demanderait énormément de temps (sans compter le temps nécessaire pour en assurer le support), et cette librairie ne serait que très peu utilisée par rapport au reste. Le jeu n'en vaut donc pas la chandelle, et je vous recommande donc si vous devez générer des PDFs d'utiliser Zend_Pdf. Un autre exemple : les fonctionnalités d'i18n de Stato ne couvrent que la traduction, et ce pour une raison simple, c'est qu'il existe aujourd'hui une excellente extension PECL nommée intl pour gérer tout le reste. Etant une extension codée en C, ses performances sont de plus bien supérieures à un équivalent PHP.

===== Mon hébergement ne me permet pas d'utiliser telle ou telle extension PHP recommandée | Mon serveur est encore en PHP 5.1.x... =====
PHP évolue, et de nouvelles fonctionnalités sont sans cesse ajoutées pour répondre aux besoins des développeurs. Pour ne citer que 2 exemples, l'ajout des nouvelles classes DateTime et DateTimeZone, ou encore l'extension intl sont de réelles avancées de PHP, et méritent à elles seules la mise à jour de PHP. Je comprends bien évidemmment que tout le monde ne puisse pas être maître de la mise à jour de son serveur, mais je souhaite que Stato et les développeurs l'utilisant continuent à exploiter les nouveautés de PHP, spécialement quand ces nouveautés offrent de meilleures performances qu'une solution codée en PHP.
