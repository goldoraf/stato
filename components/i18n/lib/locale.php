<?phpclass SLocale{    public static $default_language = 'en_US';    public static $translator_class = 'SXliffTranslator';        private static $active     = null;    private static $cache      = array();    private static $translator = null;    private static $plural_rules = array    (        '0' => array('hu','ja','ko','tr'),        '$c == 1 ? 0 : 1' => array('da','nl','en','de','no','sv','et','fi','fr','el','he','it','pt','es','eo'),        '$c == 1 ? 0 : ($c == 2 ? 1 : 2)' => array('ga','gd'),        '($c%10 == 1 && $c%100 != 11) ? 0 : ($c%10 >= 2 && $c%10 <= 4 && ($c%100 < 10 || $c%100 >= 20) ? 1 : 2)' => array('hr','cs','ru','sk','uk'),        '($c%10 == 1 && $c%100 != 11) ? 0 : ($c != 0 ? 1 : 2)' => array('lv'),        '($c%10 == 1 && $c%100 != 11) ? 0 : ($c%10 >= 2 && ($c%100 < 10 || $c%100 >= 20) ? 1 : 2)' => array('lt'),        '$c == 1 ? 0 : ($c%10 >= 2 && $c%10 <= 4 && ($c%100 < 10 || $c%100 >= 20) ? 1 : 2)' => array('pl'),        '$c%100 == 1 ? 0 : ($c%100 == 2 ? 1 : ($c%100 == 3 || $c%100 == 4 ? 2 : 3))' => array('sl')    );        private $prop_read_only = array('language', 'country', 'language_type', 'code');    private $properties     = array();        public static function set($locale)    {        if (!self::is_supported($locale))            throw new Exception('Unknown locale '.$locale);                putenv("LANG=".$locale."");        if (count($exp = explode('_', $locale)) != 1) $win_locale = $exp[0];        else $win_locale = $locale;        setlocale(LC_TIME, $locale.'.utf8', $locale, $win_locale);                if (isset(self::$cache[$locale]))            self::$active = self::$cache[$locale];        else            self::$active = new SLocale($locale);                    if (self::$translator === null)        {            $translator_class = self::$translator_class;            self::$translator = new $translator_class();        }    }        public static function active()    {        return self::$active;    }        public static function translate($key, $args = array(null))    {        if (is_array($key)) $key = $key[0];                if (self::$active->code == self::$default_language) $translation = $key;        else $translation = self::$translator->fetch($key, self::$active, $args[0]);                array_unshift($args, $translation);        return call_user_func_array('sprintf', $args);    }        public static function is_supported($locale)    {        return file_exists(self::data_path().$locale.'.php');    }        public static function get_accepted_languages()    {        $langs = explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']);        $qcandidat = 0;        $nblang = count($langs);                for ($i=0; $i<$nblang; $i++)        {            for ($j=0; $j<count($langs); $j++)            {                $lang = trim($langs[$j]); // Supprime les espaces avant et après $lang                // Lang est de la forme langue;q=valeur                                if (!strstr($lang, ';') && $qcandidat != 1)                {                    // Si la chaine ne contient pas de valeur de préférence q                    $candidat = $lang;                    $qcandidat = 1;                    $indicecandidat = $j;                }                else                {                    // On récupère l'indice q                    $q = ereg_replace('.*;q=(.*)', '\\1', $lang);                                        if ($q > $qcandidat)                    {                        $candidat = ereg_replace('(.*);.*', '\\1', $lang); ;                        $qcandidat = $q;                        $indicecandidat = $j;                    }                 }            }                        if (strpos($candidat, '-'))            {                list($pref, $suff) = explode('-', $candidat);                $candidat = $pref.'_'.strtoupper($suff);            }            else $candidat = $candidat.'_'.strtoupper($candidat); // for IE < 7                        $resultat[$i] = $candidat;                        $qcandidat=0;            // On supprime la valeur du tableau            unset($langs[$indicecandidat]);               $langs = array_values($langs);        }        return $resultat;    }        private static function data_path()    {        return STATO_CORE_PATH.'/components/i18n/data/';    }        public function __construct($locale)    {        $this->properties['code'] = $locale;                if (strpos($locale, '_') !== false)            list($this->properties['language_type'], ) = explode('_', $locale);        else            $this->properties['language_type'] = $locale;                $this->properties = array_merge($this->properties, self::fetch_data());        $this->plural_rule = $this->plural_rule();    }        public function __get($key)    {        return $this->properties[$key];    }        public function __set($key, $value)    {        if (!in_array($key, $this->prop_read_only)) $this->properties[$key] = $value;    }        private function fetch_data($folder = null)    {        $path = self::data_path();        if ($folder !== null) $path = $path.$folder.'/';                $data = array();        if ($this->code != $this->language_type)            $data = array_merge($data, include($path.$this->language_type.'.php'));        $data = array_merge($data, include($path.$this->code.'.php'));                if (count($data) == 0)            throw new Exception("No data found for locale {$this->code}");                    return $data;    }        private function plural_rule()    {        foreach (self::$plural_rules as $rule => $types)            if (in_array($this->language_type, $types)) return 'return '.$rule.';';    }}?>